jQuery é uma biblioteca JavaScript que simplifica o percurso de um documento HTML, o gerenciamento de eventos, as animações e as interações Ajax para o desenvolvimento rápido de aplicações Web.

Na verdade, ela não faz praticamente nada a mais que é possível se fazer com JavaScript, mas oferece uma forma mais simples para isso. A biblioteca é compatível com os principais navegadores e é extensível através de plugins (disponíveis no npm), o que significa que pode incorporar funcionalidades novas que trariam recursos realmente novos. Finalmente, jQuery é usada em muitos outros projetos, como o Boostrap.

Mas se jQuery faz o mesmo que JavaScript, por que usá-la? Porque os seus criadores e a comunidade de usuários criaram vários componentes que resolvem os nossos problemas mais comuns, isto é, que aparecem na maioria das aplicações. Isso nos poupa de resolver esses mesmos problemas pessoalmente. 


INSTALAÇÃO
jQuery pode ser usada de duas formas:

Por meio de um arquivo jquery-X.X.X.min.js instalado localmente. Os arquivos podem ser baixados em https://jquery.com/download/

Por meio do CDN, cujos arquivos podem ser encontrados em https://code.jquery.com/
Cada arquivo possui uma versão X.X.X específica, que segue o padrão Versionamento Semântico. Nos nossos projetos, usaremos sempre a versão minificada.


INSERÇÃO NA PÁGINA
A jQuery pode ser encaixada na página como um script qualquer, mas deve vir antes de qualquer uso que seja feito dela:

<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <title>Demo</title>
  <meta charset="utf-8">
  <script src="jquery-X.X.X.min.js"></script>
  <script>
    $( document ).ready(function() {
       // Seu código
    });
  </script>
</head>
<body>
  <p><a href="http://jquery.com/">jQuery</a></p>
</body>
</html>
É claro que, nesse exemplo, o X.X.X deve ser substituído pela versão atual da jQuery.


USO
Agora podemos como usar a jQuery, veja esse trecho que pode ser inserido no código acima:

$( document ).ready(function() {
    $( "a" ).click(function(evt) {
        alert( "O link não funcionará mais." );
        evt.preventDefault();
    });
});
Aqui temos alguns elementos bem importantes:

jQuery usa a função $ para fazer a seleção dos elementos. É uma função equivalente ao método querySelectorAll e que, portanto, usa a sintaxe dos seletores CSS, mas que retorna uma coleção de objetos jQuery (e não uma coleção de objetos HTML).
O método ready do objeto document equivale ao método onload do objeto window. Tudo que depender de todos os recursos da página serem carregados (inclusive a própria jQuery) deve ser colocado dentro desse método. Observe que esse método recebe uma função que será executada quando o documento estiver pronto.
Cada objeto jQuery selecionado possui um conjunto de recursos vinculados a ele. Um desses recursos é o de tratamento de eventos. No exemplo, usamos o método click para associar uma função manipuladora ao evento click de um link. Funções manipuladoras de evento recebem um objeto que representa o evento e nos deixa fazer as mesmas coisas que vimos em JavaScript simples.

FUNCIONALIDADES
As principais funcionalidades da jQuery estão organizadas em 8 grupos:

Núcleo - Funções do núcleo da jQuery, além de alguns utilitários mais usados;
Seleção e percurso - Funções para localização de conteúdo e para navegação entre eles;
HTML e CSS - Funções para edição e alteração de conteúdo e de formatação;
Eventos - Funções para gerenciamento de eventos de interface;
Efeitos - Funções para animações básicas;
AJAX - Funções para acesso assíncrono a dados e para manipulação de objetos JSON;
Interface - Plugin para controles avançados de interface com o usuário;
Extensibilidade - Base para a construção de plugins.
jQuery é um assunto muito extenso. Assim, neste momento, veremos apenas as suas funcionalidades mais básicas.

Toda a operação com jQuery começa com a seleção dos elementos aos quais serão feitas as leituras ou alterações.

Os seletores não retornam os elementos HTML da página, mas um conjunto de objetos da própria jQuery que atendam aos critérios dos seletores. Esses critérios são os mesmos da CSS.

Em seguida, as funções jQuery podem ser executadas sobre esses elementos. Veja este exemplo abaixo. Em primeiro lugar, criamos um botão na página:

<button id="ola">Olá mundo.</button>
Agora, podemos selecionar esse botão com a jQuery e associar uma função ao seu evento click.

$('#ola').click( function() {
  alert("Olá mundo!");
});
Mas é muito importante entender que não estamos associando uma função diretamente ao atributo onclick do botão. Estamos passando essa função para o método click de um objeto jQuery associado ao elemento de id ola. Percebe a volta que demos? Quem efetivamente cuidará da associação da função ao evento é o jQuery. Nós apenas pedimos que ele faça isso para a gente, por meio do método click.

Antes de vermos quais são as operações que podemos fazer com os objetos jQuery, vamos ver algumas alternativas de seletores.


PRINCIPAIS SELETORES
Alguns seletores básicos de elementos são estes listados abaixo (exatamente como na CSS):

*   — Seleciona todos os elementos
tipo   — Seleciona os elementos do tipo especificado
ancestral descendente   — Seleciona os elementos de um tipo que sejam descendentes de um elemento de outro tipo
pai > filho   — Seleciona os elementos de um tipo que sejam filhos (diretos) de um elemento de outro tipo
#id   — Seleciona um elemento com um determinado identificador
.classe   — Seleciona os elementos de uma determinada classe
tipo.classe   — Seleciona os elementos de um tipo e de uma dada classe
anterior + tipo   — Seleciona os elementos de um tipo que são imediatamente precedidos por um irmão de outro tipo
anterior ~ tipo   — Seleciona os elementos de um tipo que são precedidos (mesmo que não imediatamente) por um irmão de outro tipo
e1, e2, e3   — Seleciona os elementos dos tipos especificados
tipo:not(outroTipo)   — Seleciona os elementos de um tipo que não sejam de outro tipo 
Também podemos selecionar de diversas outras formas, como por atributos, por pseudo-classes, por tipos de campos de formulário, pelos estados desses campo, por conteúdo ou pela ordem que aparecem em um conjunto. A lista é bem extensa e não vale a pena reproduzir tudo aqui. Assim, deixo a referência online para você: https://api.jquery.com/category/selectors/

Uma das principais operações que fazemos com jQuery é a recuperação ou a alteração da página, seja do seu conteúdo, da sua formatação ou do seu comportamento.

O conteúdo é atualizado por meio dos métodos html() e text(). A diferença básica entre eles é que o método text() ignora as marcações. Para campos de formulário, usamos o método val().

html()   — Recupera o conteúdo HTML de um elemento.
html(valor)   — Define o conteúdo HTML de um elemento.
text()   — Recupera o conteúdo textual de um elemento (ignorando as marcações, isto é, os filhos).
text(valor)   — Define o conteúdo textual de um elemento. Como ignora as marcações, qualquer tag será convertida em caracteres (ex.: '<b>' à '&lt;b&gt;').
val()   — Retorna o valor do campo de formulário.
val(valor)   — Estabelece o valor para o campo de formulário.
Vejamos um exemplo de como isso pode ser usado. No trecho abaixo, você pode ver um parágrafo em que colocamos um número para fazer o papel de um contador. Em seguida, temos um botão ao qual queremos associar um evento que aumenta esse contador. A cada clique, o número deve aumentar.

<p>Contador: <span id="contador">0</span></p>
<button id="mais1">+1</button>
Agora podemos criar o código jQuery para associar uma função de incremento a esse botão:

$('#mais1').click( function() {
  let valor = parseInt($('#contador').text());
  $('#contador').text(valor + 1);
});
Além de alterarmos o conteúdo textual ou HTML dos elementos, podemos criar conteúdo adicional com a própria função $ da jQuery:

$('<p>Novo parágrafo</p>');
Com esse novo parágrafo, podemos fazer todas as operações necessárias e depois adicioná-lo à página por meio de algum desses métodos:

prepend()   — Insere conteúdo como o primeiro filho do elemento.
append()   — Insere conteúdo como o último filho do elemento.
before()   — Insere conteúdo antes do elemento (como irmão).
after()   — Insere conteúdo após o elemento (como irmão).
prependTo()   — Insere conteúdo como o primeiro filho do elemento indicado.
appendTo()   — Insere conteúdo como o último filho do elemento indicado.
insertBefore()   — Insere conteúdo antes do elemento indicado (como irmão).
insertAfter()   — Insere conteúdo após o elemento indicado (como irmão)
Veja esse exemplo de acréscimo do novo parágrafo a um elemento div específico:

$('#div1').append( $('<p>Novo parágrafo</p>') );
Um elemento também pode ser criado por meio de um objeto de atributos, sendo que as propriedades html e text desse objeto possuem um significado especial (bastante intuitivas). Veja esse exemplo:

<!DOCTYPE html>
<html lang="pt-BR">
  <head>
    <title>Demo</title>
    <meta charset="utf-8" />
    <script src="https://code.jquery.com/jquery-3.5.0.min.js"></script>
    <script>
      $(document).ready(function() {
        let img = $('<img />', {
          src: 'https://picsum.photos/200',
          id: 'foto',
          alt: 'Foto do Picsum',
        });
        $('#p1').append(img);

        let para = $('<p></p>', {
          id: 'p2',
          html: 'segundo parágrafo',
        });
        $('#div1').append(para);
      });
    </script>
  </head>
  <body>
    <div id="div1">
      <p id="p1"></p>
    </div>
  </body>
</html>
Aqui, criamos dois elementos novos, uma imagem e um parágrafo, e os adicionados aos conteúdos já existentes na página.

Os atributos podem ser recuperados por meio do método attr(). Esse método, porém, retorna undefined se o atributo não existir. Assim, o método prop() deve ser usado para se testar propriedades como checked, selected, disablede selectedIndex.

attr(atrib)   — Recupera o atributo atrib um elemento.
attr(atrib, valor)   — Define o valor de um atributo atrib.
attr(obj)   — Define os valores dos atributos por meio de um objeto.
prop(prop)   — Recupera a propriedade prop um elemento.
prop(prop, valor)   — Define o valor de uma propriedade prop.
prop(obj)   — Define os valores das propriedades por meio de um objeto.
Veja esse exemplo para fazermos a seleção de um determinado elemento em uma caixa de seleção:

$('#caixaSelecao').prop('selectedIndex', 3);
Uma importante diferença entre as funções attr() e prop() é que attr() retorna as informações do documento HTML original, isto é, independentemente das alterações feitas pelo usuário. Obviamente, isso se aplica apenas a campos e outros elementos editáveis.

Em outras palavras, o documento escrito possui atributos, mas quando ele é renderizado pelo navegador, esses atributos são transformados em propriedades. Os atributos que não foram definidos explicitamente (lang, title, alt, class, ...) são criados (com valores vazios). E é possível sim alterar um atributo, considerando-se que a alteração seria feita no documento. Isso também alterará o valor da propriedade.

A jQuery também nos permite remover elementos, atributos e conteúdo de uma página HTML:

remove()   — Remove o elemento selecionado.
empty()   — Remove o conteúdo do elemento selecionado.
removeAttr(attr)   — Remove um atributo do elemento.
removeProp(prop)   — Remove uma propriedade do elemento.
Como você vê, há muitas possibilidades de alteração dos conteúdos e esses são apenas alguns dos recursos oferecidos pela jQuery.

Da mesma forma que oferece uma série de elementos para manipulação da estrutura e do conteúdo do documento, jQuery oferece uma série de métodos aceleradores do trabalho com formatação. O principal desses métodos é o css(), que permite recuperar ou definir um propriedade (ou um conjunto de propriedades) para os elementos selecionados, como mostra este exemplo:

var cor = $('#caixa').css('background-color');
$('#caixa').css('background-color', 'yellow');
$('#caixa'.css({
  background-color: 'yellow',
  border: 'thin solid black'
});
Há muitos métodos para controle da formatação e do posicionamento dos elementos, mas um conjunto bem interessante é aquele que permite a definição, inspeção e mudança de classes. Apesar de vários exemplos terem usado o método css(), é importante considerar que a inclusão de formatação em código JavaScript não é recomendada.

É também importante lembrar que o W3C fez um grande esforço para separar o conteúdo da formatação. Assim, não faria muito sentido colocar essa formatação, agora, no código. Assim, recomenda-se mudar a formatação por meio dos ajustes feitos nas classes.

Esses métodos de classes são:

addClass()   — Adiciona uma classe ao elemento.
hasClass()   — Testa se o elemento possui uma determinada classe.
removeClass()   — Remove uma classe do elemento.
toggleClass()   — Adiciona a classe se o elemento não a tiver ou retira a classe se o elemento já a tiver.
Veja esse exemplo de ativação e desativação de classe. Toda vez que um elemento de id switch for clicado, será atribuída ou removida uma classe ativado a esse elemento. Neste ponto, observe o uso do seletor this. Esse é um seletor especial que faz referência ao próprio elemento selecionado.

$('#switch').click(function(){
  $(this).toggleClasse('ativado');
});

A função $() retorna um ou mais objetos que atendam ao critério do seletor. Podemos, em seguida, executar ações nesses objetos como a formatação por meio do método css() ou tratar um evento de clique por meio do método click().

Antes da aplicação de uma ação, porém, é possível fazermos uma manipulação do conjunto de objetos retornados pela função. Por exemplo, podemos acrescentar outros objetos ao conjunto, por meio do método add(). Podemos também filtrar o conjunto de tal forma que atenda a um segundo seletor por meio do método filter().

$('tr').filter(':even').css('background-color', 'lightgrey');
A primeira forma de processamento do conjunto de objetos selecionados é a aplicação de filtros, como no exemplo acima. Existem vários métodos que permitem diferentes formas de filtragem dos objetos.

filter()   — Reduz o conjunto para aqueles que atendem a um seletor ou passem em uma função de teste.
is()   — Testa se pelo menos um objeto atende ao seletor e, nesse caso, retorna verdadeiro.
not()   — Elimina do conjunto os elementos que se enquadrem no segundo seletor.
has()   — Reduz o conjunto àquele elementos que possuam um determinado descendente. 
eq()   — Reduz o conjunto para apenas um elemento do índice especificado.
first()   — Reduz o conjunto ao seu primeiro elemento.
last()   — Reduz o conjunto ao seu último elemento.
slice()   — Reduz o conjunto a um subconjunto especificado por uma faixa de índices.
map()   — Transforma o conjunto em um outro objeto contendo novos valores.
Veja o exemplo abaixo. É uma operação simples, mas que combina várias ações. O objetivo é retornar a lista de IDs dos campos do tipo input. Em primeiro lugar, há uma seleção dos elementos por meio do seletor :input. Depois, usamos o método map() para aplicar uma função de transformação. Essa função retorna o valor do atributo id de cada elemento, criando um novo vetor de IDs. Finalmente, usamos o método get() para retornar o resultado como  um objeto JavaScript comum.

// Retorna os ids dos elementos selecionados
let listaIDs = $(':input').map(function() { 
  return $(this).attr('id');
}).get();
Há muitos outros métodos para processamento ou filtragem do conjunto de elementos jQuery. Como a quantidade é muito grande, deixo aqui apenas uma referência para a documentação: https://api.jquery.com/category/traversing/